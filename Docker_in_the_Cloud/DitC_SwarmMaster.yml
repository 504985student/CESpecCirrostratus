Description: Cloudformation template that launches a build server as docker swarm master
#
Resources:
  CSPushPullProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: CSPushPullProfile
      Path: "/"
      Roles: 
        - LabRole

  DockerSwarmTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: DockerSwarmTemplate
      LaunchTemplateData:
        KeyName: vockey
        SecurityGroupIds:
          - !ImportValue CSNetworkDock:CSSecurityGroup
        InstanceType: t2.micro 
        ImageId: ami-0ebfd941bbafe70c6
        IamInstanceProfile:
          Name: CSPushPullProfile  # Use the instance profile associated with LabRole
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -ex  # Enable debugging to log each command
            
            # Update and install Docker
            sudo yum update -y
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            systemctl enable docker
            sudo chmod 666 /var/run/docker.sock

            # Install Docker Compose
            sudo curl -SL https://github.com/docker/compose/releases/download/v2.29.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

            # Initialize Docker Swarm
            docker swarm init
            
            # Obtain the Swarm join token for worker nodes
            JOIN_TOKEN=$(docker swarm join-token -q worker)

            # Store the token in AWS SSM Parameter Store
            if [ -n "$JOIN_TOKEN" ]; then
              aws ssm put-parameter --name /docker/swarms/join-token --value $JOIN_TOKEN --type String --overwrite
            else
              echo "Swarm join token not generated."
            fi

  DockerSwarmMasterInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate: 
        LaunchTemplateId: !Ref DockerSwarmTemplate
        Version: !GetAtt DockerSwarmTemplate.DefaultVersionNumber
      AvailabilityZone: !ImportValue CSNetworkDock:AvailabilityZone1
      SubnetId: !ImportValue CSNetworkDock:CSPubSubnet1
      IamInstanceProfile: CSPushPullProfile
      Tags:
        - Key: Name
          Value: DockerSwarmMaster

  CSRepository: 
    Type: AWS::ECR::Repository
    Properties: 
#      RepositoryName: "csrepository"
      EmptyOnDelete: true
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement:
          - 
            Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS: 
                - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${DockerSwarmMasterInstance}'
#              AWS: !Join [ ":", [ arn:aws:ec2, !Ref "AWS::Region",!Ref "AWS::AccountId", !Join ["/", [instance, !Ref DockerSwarmMasterInstance] ] ] ]
#              Alternative to !Sub function above, using the !Join function.
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
      Tags:
        - Key: Name
          Value: cloudshirtrepository

Outputs:
  CSRepoRef:
    Description: Reference to the repository
    Value: !Ref CSRepository
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", CSRepository ] ]

  CSSwarmMasterRef:
    Description: Reference to the swarm master
    Value: !Ref DockerSwarmMasterInstance
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", DockerSwarmMasterInstance ] ]    